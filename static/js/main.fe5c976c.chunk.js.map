{"version":3,"sources":["components/CharacterWise.jsx","components/DifficultyWise.jsx","components/TagWise.jsx","components/VerdictWise.jsx","components/RatingGraph.jsx","components/UserData.jsx","components/HeatMap.jsx","components/HandleData.jsx","components/Navbar.jsx","components/App.jsx","reportWebVitals.js","index.js"],"names":["CharacterWise","props","console","log","data","Object","keys","problemChar","map","key","push","width","Math","max","floor","length","$","className","height","chartType","loader","options","title","chartArea","chart","subtitle","colors","legend","position","bar","groupWidth","rootProps","DifficultyWise","problemDifficulty","TagWise","role","problemTags","index","pieSliceText","pieHole","verdict","VerdictWise","problemVerdicts","term","color","is3D","slices","RatingGraph","ratingData","userRatings","slice","maxRating","i","newRating","FindMaxRating","maxRatingIndex","forEach","item","contestId","toString","pointSize","pointShape","UserData","contests","allSubmissions","uniqueCorrectSubmission","totalSubmissions","solvedProblems","tried","onOneSubmission","solved","problemDict","problem","name","problemNumbers","avgAttempts","toFixed","totalContests","maxUp","maxDown","bestRank","oldRating","rank","contestNumbers","noEndBorder","borderRight","style","timeConverter","UNIX_timestamp","a","Date","getFullYear","getMonth","getDate","HeatMap","type","id","years","dataDict","creationTimeSeconds","year","month","date","dt","getData","indexOf","colorAxis","minValue","maxValue","sortOnValues","dict","items","tempDict","sort","first","second","HandleData","useState","errorSub","setErrorSub","errorRating","setErrorRating","isLoadedSubmission","setIsLoadedSubmission","isLoadedRating","setIsLoadedRating","setAllSubmission","uniqueCorrectSubmissions","setUniqueCorrectSubmission","setTotalSubmissions","setProblemChar","setProblemDifficulty","setProblemTags","setProblemVerdicts","setProblemlanguages","setUserRating","useEffect","handle","problemURL","ratingURL","fetch","then","response","ok","json","result","uniqueSubmissions","submissions","tempSubmission","tempArray","submission","MakeSubmissionUnique","sorted","sortOnKeys","CharacterWiseProblem","problemRating","rating","DifficultyWiseProblem","problemTag","tags","tag","TagWiseProblem","verdictWise","VerdictProblem","languageWise","programmingLanguage","LanguageProblem","NavBar","class","href","data-toggle","data-target","InputHandle","mySubmitHandler","event","preventDefault","setState","username","document","getElementById","value","is_submitted","state","placeholder","onClick","this","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fe5c976c.chunk.js","sourcesContent":["import React from \"react\";\nimport { XYPlot, XAxis, YAxis, makeWidthFlexible, VerticalGridLines, HorizontalGridLines, LineSeries, MarkSeries, LineMarkSeries, VerticalBarSeries, HorizontalBarSeries } from 'react-vis';\nimport { Chart } from \"react-google-charts\";\nimport $ from \"jquery\";\n\nfunction CharacterWise(props) {\n\n    console.log(\"In function Character wise\");\n\n    var data = [[\"Level\", \"Solved\"]];\n    Object.keys(props.problemChar).map(function (key) {\n        data.push([key, props.problemChar[key]]);\n    });\n\n    var width = Math.max((Math.floor((data.length - 28) * (700 / 15) + 1500)), $(\".character-graph\").width());\n    //console.log(width);\n\n    return (\n        <div className=\"character-graph\">\n            <Chart\n                width={width}\n                height={'275px'}\n                chartType=\"ColumnChart\"\n                loader={<div>Loading Chart</div>}\n                data={data}\n                options={{\n                    title: \"Problem Level\",\n                    chartArea: {\n                        width: '80%'\n                    },\n                    chart: {\n                        title: 'Difficulty wise problems',\n                        subtitle: 'The bars show to total no. of problems solved as per difficulty',\n                    },\n                    colors: ['rgb(2, 2, 140)'],\n                    legend: { position: 'none' },\n                    bar: { groupWidth: \"55%\" },\n\n                }}\n                // For tests\n                rootProps={{ 'data-testid': '2' }}\n            />\n        </div>\n    );\n\n\n}\n\nexport default CharacterWise;\n\n\n\n// import React from \"react\";\n// import { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries, MarkSeries, LineMarkSeries, VerticalBarSeries, HorizontalBarSeries } from 'react-vis';\n\n// function buildValue(hoveredCell) {\n//     const {radius, angle, angle0} = hoveredCell;\n//     const truedAngle = (angle + angle0) / 2;\n//     return {\n//       x: radius * Math.cos(truedAngle),\n//       y: radius * Math.sin(truedAngle)\n//     };\n//   }\n\n// function Example(props) {\n\n//     var ratingData = props.userRatings.map(item => (\n//         {\n//             x: item.contestId,\n//             y: item.newRating\n//         }\n//     ));\n\n//     return (\n//         <XYPlot\n//             xType=\"ordinal\"\n//             width={1000}\n//             height={250}>\n//             <VerticalGridLines />\n//             <HorizontalGridLines />\n//             <XAxis title=\"Contest ID\" />\n//             <YAxis title=\"Rating\" />\n//             <LineMarkSeries\n//                 color={\"blue\"}\n//                 fill={\"black\"}\n//                 size={3}\n//                 data={ratingData}\n//                 onValueMouseOver={(datapoint, event) => {\n//                     alert(datapoint);   \n//                 }}\n//             />\n//         </XYPlot>\n//     );\n// }\n// export default Example;\n","import React from \"react\";\nimport { XYPlot, XAxis, YAxis, makeWidthFlexible, VerticalGridLines, HorizontalGridLines, LineSeries, MarkSeries, LineMarkSeries, VerticalBarSeries, HorizontalBarSeries } from 'react-vis';\nimport { Chart } from \"react-google-charts\";\nimport $ from \"jquery\";\n\nfunction DifficultyWise(props) {\n\n    console.log(\"In function Difficulty wise\");\n\n    var data = [[\"Level\", \"Solved\"]];\n    Object.keys(props.problemDifficulty).map(function (key) {\n        data.push([key, props.problemDifficulty[key]]);\n    });\n\n\n    var width = Math.max((Math.floor((data.length - 28) * (700 / 15) + 1500)), $(\".difficulty-chart\").width());\n\n    //console.log();\n    //console.log(width);\n    return (\n        <div className=\"difficulty-chart\">\n            <Chart\n                width={width}\n                height={'275px'}\n                chartType=\"ColumnChart\"\n                loader={<div>Loading Chart</div>}\n                data={data}\n                options={{\n                    title: \"Problems Difficulty\",\n                    chartArea: {\n                        width: '80%'\n                    },\n                    chart: {\n                        title: 'Difficulty wise problems',\n                        subtitle: 'The bars show to total no. of problems solved as per difficulty',\n                    },\n                    colors: ['rgb(2, 2, 140)'],\n                    legend: { position: 'none' },\n                    bar: { groupWidth: \"55%\" },\n\n                }}\n                // For tests\n                rootProps={{ 'data-testid': '2' }}\n            />\n        </div>\n    );\n}\n\nexport default DifficultyWise;","import React from \"react\";\n\nimport { Chart } from \"react-google-charts\";\n\nfunction TagWise(props) {\n\n    console.log(\"In function Tag wise\");\n\n    var data = [[\"Tags\", \"Solved problems\", {role: \"style\"}]];\n    Object.keys(props.problemTags).map(function (key, index) {\n        data.push([key, props.problemTags[key], '#b87333']);\n    });\n\n    //data = [data[0], data.slice(1,).reverse()];\n\n    return (\n        <div className=\"tag-graph\">\n            <Chart\n                width={'100%'}\n                height={'400px'}\n                chartType=\"PieChart\"\n                loader={<div>Loading Chart</div>}\n                data={data}\n                options={{\n                    title: 'Problem Tags',\n                    pieSliceText: 'none',\n                    pieHole: 0.5,\n                }}\n                // For tests\n                rootProps={{ 'data-testid': '1' }}\n            />\n        </div>\n\n    );\n}\n\nexport default TagWise;","import React from \"react\";\nimport { Chart } from \"react-google-charts\";\n\nfunction swap(a, b){\n    return [b, a];\n}\n\nconst verdict = {\n    \"OK\": {\n        \"term\": \"Accepted\",\n        \"color\": \"#207d1a\"\n    },\n    \"TIME_LIMIT_EXCEEDED\": {\n        \"term\": \"TLE\",\n        \"color\": \"#eb540e\"\n    },\n    \"MEMORY_LIMIT_EXCEEDED\": {\n        \"term\": \"MLE\",\n        \"color\": \"#2c4a94\"\n    },\n    \"IDLENESS_LIMIT_EXCEEDED\": {\n        \"term\": \"IDLE\",\n        \"color\": \"#0c827c\"\n    },\n    \"RUNTIME_ERROR\": {\n        \"term\": \"Runtime error\",\n        \"color\": \"#d6660b\"\n    },\n    \"COMPILATION_ERROR\": {\n        \"term\": \"Compilation Error\",\n        \"color\": \"#d2e038\"\n    },\n    \"WRONG_ANSWER\": {\n        \"term\": \"Wrong Answer\",\n        \"color\": \"#d90b0b\"\n    }\n};\n\nfunction VerdictWise(props) {\n    var data = [[\"Tags\", \"Solved problems\"]];\n    var colors = [];\n    Object.keys(props.problemVerdicts).map(function (key, index) {\n        if (key in verdict) {\n            data.push([verdict[key].term, props.problemVerdicts[key]]);\n            colors.push({color: verdict[key].color});\n        }\n\n    });\n    // for(var i=1;i<data.length;i++){\n    //     if(data[i][0] === \"OK\"){\n    //         data[1] = [data[i], data[1] = data[i]][0];\n    //         colors[0] = [colors[i-1], colors[0] = colors[i-1]][0];\n    //     }\n    //     if(data[i][0] === \"Wrong Answer\"){\n    //         // [data[2], data[i]] = [data[i], data[2]];\n    //         //[colors[1], colors[i-1]] = [colors[i-1], colors[1]];\n    //     }\n    // }\n\n    //console.log(colors)\n\n    return (\n        <div className=\"verdict-graph\">\n            <Chart\n                width={'100%'}\n                height={'400px'}\n                chartType=\"PieChart\"\n                loader={<div>Loading Chart</div>}\n                data={data}\n                options={{\n                    legend: 'none',\n                    title: 'Problem Verdicts',\n                    is3D: true,\n                    slices: colors\n                }}\n                rootProps={{ 'data-testid': '1' }}\n            />\n        </div>\n\n    );\n}\n\nexport default VerdictWise;\n\n","import React from 'react';\nimport { Chart } from 'react-google-charts';\n\n\nfunction FindMaxRating(data){\n    var index = 0;\n    var maxRating = 0;\n    for(var i=0; i< data.length;i++){\n        if( maxRating < data[i].newRating ) {\n            maxRating = data[i].newRating\n            index = i;\n        }\n    }\n    return [maxRating, index];\n}\n\nfunction RatingGraph(props) {\n\n    console.log(\"In function Rating graph\");\n    \n    var ratingData = props.userRatings.slice(-100,);\n    var data = [[\"x\", \"Rating\", {'type': 'string', 'role': 'style'}]];\n\n    var [maxRating, maxRatingIndex] = FindMaxRating(ratingData);\n    var i = 0;\n\n    //console.log(maxRating, maxRatingIndex);\n\n    ratingData.forEach(function (item) {\n        if( i === maxRatingIndex){\n            data.push([item.contestId.toString(), item.newRating, 'point { size: 4; fill-color: #0a0a0a; }']);\n        } else {\n            data.push([item.contestId.toString(), item.newRating, null]);\n        }\n        i += 1;\n    });\n\n    var title = \"Contest rating in last \" + ratingData.length + \" contests\";\n    return (\n        <div className=\"rating-graph\">\n            <Chart\n                width={'100%'}\n                height={'300px'}\n                chartType=\"LineChart\"\n                loader={<div>Loading Chart</div>}\n                data={data}\n                options={{\n                    title: title,\n                    // hAxis: {\n                    //     title: 'ContestID',\n                    // },\n                    // vAxis: {\n                    //     title: 'Rating',\n                    // },\n                    pointSize: 4,\n                    pointShape: \"circle\",\n                    colors:[\"rgb(2, 2, 140)\"],\n                    legend: { position: 'none' },\n                }}\n                rootProps={{ 'data-testid': '1' }}\n            />\n        </div>\n        //}\n    );\n}\n\nexport default RatingGraph;","import React from \"react\";\nimport { unmountComponentAtNode } from \"react-dom\";\n\n\n//Sort a dictionery on values\nfunction sortOnValues(dict) {\n    var items = Object.keys(dict).map(function (key) {\n        return [key, dict[key]];\n    });\n    var tempDict = {};\n    // Sort the array based on the second element\n    items.sort(function (first, second) {\n        return second[1] - first[1];\n    });\n\n    items.forEach(function (item) {\n        tempDict[item[0]] = item[1];\n    });\n    return tempDict;\n}\n\n//sort a dictionery by it's keys\nfunction sortOnKeys(dict) {\n    var sorted = [];\n    for (var key in dict) {\n        sorted[sorted.length] = key;\n    }\n    sorted.sort();\n    var tempDict = {};\n    for (var i = 0; i < sorted.length; i++) {\n        tempDict[sorted[i]] = dict[sorted[i]];\n    }\n    return tempDict;\n}\n\nfunction contestNumbers(contests) {\n    var maxUp = 0;\n    var maxDown = 0;\n    var bestRank = 200000000;\n\n    for (var i = 0; i < contests.length; i++) {\n        if (i !== 0) {\n            if (contests[i].newRating - contests[i].oldRating > maxUp) {\n                maxUp = contests[i].newRating - contests[i].oldRating;\n            }\n            if (-contests[i].newRating + contests[i].oldRating > maxDown) {\n                maxDown = -contests[i].newRating + contests[i].oldRating;\n            }\n            if (bestRank > contests[i].rank) {\n                bestRank = contests[i].rank\n            }\n        }\n    }\n\n    return [maxUp, maxDown, bestRank];\n}\n\nfunction problemNumbers(data) {\n    var tried = 0;\n    var onOneSubmission = 0;\n    var solved = 0;\n\n    var problemDict = {};\n\n    for (var i = 0; i < data.length; i++) {\n        if (data[i].problem.name in problemDict) {\n            problemDict[data[i].problem.name].tried++;\n            if (data[i].verdict === \"OK\") {\n                problemDict[data[i].problem.name].solved++;\n            }\n\n        } else {\n            problemDict[data[i].problem.name] = {\n                \"tried\": 1,\n                \"solved\": 0,    \n            }\n            if (data[i].verdict === \"OK\") {\n                problemDict[data[i].problem.name].solved++;\n            }\n        }\n    }\n\n    Object.keys(problemDict).forEach(function (item) {\n        tried++;\n        if (problemDict[item].solved !== 0) {\n            solved++;\n        }\n        if (problemDict[item].solved === problemDict[item].tried) {\n            onOneSubmission++;\n        }\n    });\n\n    return [tried, solved, onOneSubmission];\n}\n\n\nfunction UserData(data) {\n\n    console.log(\"In function userdata\");\n\n    if (data.contests === 0) {\n        return (<p>No Contests!!</p>)\n    }\n\n    var allSubmissions = data.allSubmissions;\n    var uniqueCorrectSubmission = data.uniqueCorrectSubmission;\n    var totalSubmissions = allSubmissions.length;\n    var solvedProblems = uniqueCorrectSubmission.length;\n\n    var [tried, solved, onOneSubmission] = problemNumbers(allSubmissions)\n    var avgAttempts = (totalSubmissions / solvedProblems).toFixed(2);\n\n    var contests = data.contests;\n\n    var totalContests = contests.length;\n    var [maxUp, maxDown, bestRank] = contestNumbers(contests);\n\n    const noEndBorder = { borderRight: \"none\" };\n\n    return (\n        <div className=\"user-data\">\n            <div className=\"row\">\n                <div className=\"col-lg-3\">\n                    <p>Tried: {tried}</p>\n                </div>\n                <div className=\"col-lg-3\">\n                    <p>Solved: {solved}</p>\n                </div>\n                <div className=\"col-lg-3\">\n                    <p>Avg submissions: {avgAttempts}</p>\n                </div>\n                <div className=\"col-lg-3\" style={noEndBorder}>\n                    <p>At 1st submission: {onOneSubmission}</p>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-lg-3\">\n                    <p>Total Contests: {totalContests}</p>\n                </div>\n                <div className=\"col-lg-3\">\n                    <p>Max Up: {maxUp}</p>\n                </div>\n                <div className=\"col-lg-3\">\n                    <p>Max Down: {maxDown}</p>\n                </div>\n                <div className=\"col-lg-3\" style={noEndBorder}>\n                    <p>Best Rank: {bestRank}</p>\n                </div>\n            </div>\n        </div>\n    );\n\n\n\n}\n\nexport default UserData;","import React from \"react\";\nimport { Chart } from \"react-google-charts\";\n\nfunction timeConverter(UNIX_timestamp) {\n    var a = new Date(UNIX_timestamp * 1000);\n    var year = a.getFullYear();\n    var month = a.getMonth();\n    var date = a.getDate();\n\n\n    return [year, month, date];\n}\n\nfunction getData(data) {\n    var dataDict = {};\n\n    for (var i = 0; i < data.length; i++) {\n        var [year, month, date] = timeConverter(data[i].creationTimeSeconds);\n        var dated = new Date(year, month, date);\n        var dt = dated.toString();\n\n        if (dt in dataDict) {\n            dataDict[dt] += 1;\n        } else {\n            dataDict[dt] = 1;\n        }\n    }\n\n    return Object.keys(dataDict).map(function (key) {\n        var dt = new Date(key);\n        return [dt, dataDict[key]];\n    });\n}\n\nfunction HeatMap(props) {\n\n    console.log(\"In function Heatmap\");\n\n    var data = [[{ type: 'date', id: 'Date' }, { type: 'number', id: 'Won/Loss' }]];\n    var years = [];\n    data.push(...getData(props.data));\n    for(var i=1;i<data.length;i++){\n        if(years.indexOf(data[i][0].getFullYear()) === -1){\n            years.push(data[i][0].getFullYear());\n        }\n    }\n    var height = (30 + 150 * years.length);\n    console.log(years);\n    return (\n        <div className=\"heatmap\">\n            <Chart\n                width={\"100%\"}\n                height={height}\n                chartType=\"Calendar\"\n                loader={<div>Loading Chart</div>}\n                data={data}\n                options={{\n                    title: 'Submission Heatmap',\n                    colorAxis:{minValue: 0, maxValue:\"#032052\", colors: ['#ffffff', '#0027ff', '#00127d']}\n                }}\n                rootProps={{ 'data-testid': '1' }}\n            />\n        </div>\n    );\n}\n\nexport default HeatMap;","import React, { useState, useEffect } from 'react';\nimport CharacterWise from './CharacterWise';\nimport DifficultyWise from \"./DifficultyWise\";\nimport TagWise from \"./TagWise\";\nimport VerdictWise from \"./VerdictWise\";\nimport LanguageWise from \"./LanguageWise\";\nimport RatingGraph from \"./RatingGraph\";\nimport UserData from \"./UserData\";\nimport HeatMap from \"./HeatMap\"\n\n//Sort a dictionery on values\nfunction sortOnValues(dict) {\n    var items = Object.keys(dict).map(function (key) {\n        return [key, dict[key]];\n    });\n    var tempDict = {};\n    // Sort the array based on the second element\n    items.sort(function (first, second) {\n        return second[1] - first[1];\n    });\n\n    items.forEach(function (item) {\n        tempDict[item[0]] = item[1];\n    });\n    return tempDict;\n}\n\n//sort a dictionery by it's keys\nfunction sortOnKeys(dict) {\n    var sorted = [];\n    for (var key in dict) {\n        sorted[sorted.length] = key;\n    }\n    sorted.sort();\n    var tempDict = {};\n    for (var i = 0; i < sorted.length; i++) {\n        tempDict[sorted[i]] = dict[sorted[i]];\n    }\n    return tempDict;\n}\n\n//Get all unique correct submissions\nfunction MakeSubmissionUnique(submissions) {\n    var tempSubmission = [];\n    var tempArray = [];\n\n    submissions.forEach(function (submission) {\n        if (submission.verdict === \"OK\") {\n            if (tempArray.indexOf(submission.problem.name) === -1) {\n                tempSubmission.push(submission);\n                tempArray.push(submission.problem.name);\n            }\n        }\n    });\n    return tempSubmission;\n}\n\n//Get a dictionery of number of problems by A, B, C, D....\nfunction CharacterWiseProblem(submissions) {\n    var problemChar = {};\n\n    submissions.forEach(function (submission) {\n        if (submission.problem.index[0] in problemChar) {\n            problemChar[submission.problem.index[0]] += 1;\n        } else {\n            problemChar[submission.problem.index[0]] = 1;\n        }\n    });\n    return sortOnKeys(problemChar);\n}\n\n//Get a dictionery of number of problems by problem rating\nfunction DifficultyWiseProblem(submissions) {\n    var problemRating = {};\n\n    submissions.forEach(function (submission) {\n        /*var temp = problemRating;*/\n        if (submission.problem.rating) {\n            if (submission.problem.rating in problemRating) {\n                problemRating[submission.problem.rating] += 1;\n            } else {\n                problemRating[submission.problem.rating] = 1;\n            }\n        }\n    });\n    return problemRating;\n}\n\n\n//Get a dictionary of number of problems according to tags\nfunction TagWiseProblem(submissions) {\n    var problemTag = {};\n    submissions.forEach(function (submission) {\n        submission.problem.tags.forEach(function (tag) {\n            if (tag in problemTag) {\n                problemTag[tag] += 1;\n            } else {\n                problemTag[tag] = 1;\n            }\n        });\n    });\n    return sortOnValues(problemTag);\n}\n\n//Get num of problems according to verdict\nfunction VerdictProblem(submissions) {\n    var verdictWise = {};\n    submissions.forEach(function (submission) {\n        if (submission.verdict in verdictWise) {\n            verdictWise[submission.verdict] += 1;\n        } else {\n            verdictWise[submission.verdict] = 1;\n        }\n    });\n    return verdictWise;\n}\n\n//Get num of problems according to language used\nfunction LanguageProblem(submissions) {\n    var languageWise = {};\n    submissions.forEach(function (submission) {\n        if (submission.programmingLanguage in languageWise) {\n            languageWise[submission.programmingLanguage] += 1;\n        } else {\n            languageWise[submission.programmingLanguage] = 1;\n        }\n    });\n    return sortOnValues(languageWise);\n}\n\nfunction HandleData(item) {\n\n    console.log(\"In function Handle\");\n\n    const [errorSub, setErrorSub] = useState(null);\n    const [errorRating, setErrorRating] = useState(null);\n\n    const [isLoadedSubmission, setIsLoadedSubmission] = useState(false);\n    const [isLoadedRating, setIsLoadedRating] = useState(false);\n\n    const [allSubmissions, setAllSubmission] = useState([]);\n    const [uniqueCorrectSubmissions, setUniqueCorrectSubmission] = useState([]);\n    const [totalSubmissions, setTotalSubmissions] = useState(0);\n    const [problemChar, setProblemChar] = useState({});\n    const [problemDifficulty, setProblemDifficulty] = useState({});\n    const [problemTags, setProblemTags] = useState({});\n    const [problemVerdicts, setProblemVerdicts] = useState({});\n    const [problemLanguages, setProblemlanguages] = useState({});\n\n    const [userRatings, setUserRating] = useState({});\n\n    useEffect(() => {\n\n        var handle = item.handle;\n        var problemURL = \"https://codeforces.com/api/user.status?handle=\" + handle + \"&from=1&count=10000\";\n        var ratingURL = \"https://codeforces.com/api/user.rating?handle=\" + handle;\n\n        console.log(\"In function Handlle data use effect\");\n\n        setIsLoadedSubmission(false);\n        setIsLoadedRating(false);\n        setErrorRating(null)\n        setErrorSub(null);\n\n        fetch(problemURL)\n            .then((response) => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    console.log(\"In error of submission\");\n                    setErrorSub(\"something went wrong\");\n                    setIsLoadedSubmission(true);\n                }\n            })\n            .then(\n                (result) => {\n\n                    if (result) {\n                        console.log(\"fetching problem URL\");\n                        var allSubmissions = result[\"result\"];\n                        setAllSubmission(allSubmissions);\n\n                        var uniqueSubmissions = MakeSubmissionUnique(allSubmissions)\n                        setUniqueCorrectSubmission(uniqueSubmissions)\n\n                        setProblemChar(CharacterWiseProblem(uniqueSubmissions));\n                        setTotalSubmissions(allSubmissions.length);\n                        setProblemDifficulty(DifficultyWiseProblem(uniqueSubmissions));\n                        setProblemTags(TagWiseProblem(uniqueSubmissions));\n                        setProblemVerdicts(VerdictProblem(allSubmissions));\n                        setProblemlanguages(LanguageProblem(allSubmissions));\n                        setIsLoadedSubmission(true);\n                    }\n\n                }\n            )\n\n        fetch(ratingURL)\n            .then((response) => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    console.log(\"In error of Rating\");\n                    setErrorRating(\"something went wrong\");\n                    setIsLoadedRating(true);\n                }\n            })\n            .then(\n                (result) => {\n                    if (result) {\n                        setUserRating(result[\"result\"]);\n                        setIsLoadedRating(true);\n                    }\n                }\n            )\n\n    }, [item.handle])\n\n    if (errorSub || errorRating) {\n        return <div>Error: Not Found</div>;\n    } else if (!(isLoadedSubmission && isLoadedRating)) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <div>\n                <UserData\n                    contests={userRatings}\n                    allSubmissions={allSubmissions}\n                    uniqueCorrectSubmission={uniqueCorrectSubmissions}\n                />\n                <RatingGraph\n                    totalSubmissions={totalSubmissions}\n                    userRatings={userRatings}\n                />\n                <CharacterWise\n                    totalSubmissions={totalSubmissions}\n                    problemChar={problemChar}\n                />\n\n                <DifficultyWise\n                    totalSubmissions={totalSubmissions}\n                    problemDifficulty={problemDifficulty}\n                />\n\n                <div className=\"row\">\n                    <div className=\"col-lg-5\">\n                        <VerdictWise\n                            totalSubmissions={totalSubmissions}\n                            problemVerdicts={problemVerdicts}\n                        />\n                    </div>\n                    <div className=\"col-lg-7\">\n                        <TagWise\n                            totalSubmissions={totalSubmissions}\n                            problemTags={problemTags}\n                        />\n                    </div>\n                </div>\n                <HeatMap data={allSubmissions} />\n            </div>\n        );\n    }\n}\n\nexport default HandleData;","import React from \"react\";\nimport { RectSeriesCanvas } from \"react-vis\";\n\nfunction NavBar() {\n    return (\n        <nav class=\"navbar navbar-expand-md bg-dark navbar-dark\">\n\n            <a class=\"navbar-brand\" href=\"#\">Track CF Performance</a>\n\n            <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div class=\"navbar-links collapse navbar-collapse\" id=\"collapsibleNavbar\">\n                <ul class=\"navbar-nav\">\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"#\">HOME</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"#\">COMPARE</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"#\">PROBLEMS</a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    );\n}\n\nexport default NavBar;","import React from \"react\";\nimport HandleData from \"./HandleData\";\nimport $ from \"jquery\";\nimport NavBar from \"./Navbar\";\n//import Sorting from \"./Sorting\"\n\nclass InputHandle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: '', is_submitted: false };\n    console.log(\"In function Input constructor\");\n  }\n  mySubmitHandler = (event) => {\n    event.preventDefault();\n    this.setState({\n      username: document.getElementById(\"inputhandle\").value,\n      is_submitted: true\n    });\n    console.log(\"In function submit handler\");\n  }\n  render() {\n    return (\n      <div>\n        <div class=\"form-inline\">\n          <div class=\"form-group\">\n            <input type=\"text\" class=\"form-control\" id=\"inputhandle\" placeholder=\"Handle\" />\n          </div>\n          <button type=\"submit\" class=\"btn btn-dark\" onClick={this.mySubmitHandler}>Submit</button>\n        </div>\n\n        {this.state.is_submitted && <HandleData handle={this.state.username} />}\n        {/* <HandleData handle={\"srco\"} /> */}\n        {/* <Sorting></Sorting> */}\n        {/* <Example /> */}\n        {/* //<section id=\"submissions\"></section> */}\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  console.log(\"In function App\");\n  return (\n    <div className=\"heading\">\n      <NavBar />\n      <InputHandle />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}